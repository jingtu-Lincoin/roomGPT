datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  credits       Int        @default(3)
  location      String?
  accounts      Account[]
  sessions      Session[]
  rooms         Room[]
  purchases     Purchase[]
  tel           String?     @unique
  vipLevel      Int        @default(0)
  password      String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          String   @id @default(cuid())
  replicateId String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  inputImage  String
  outputImage String
  prompt      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([replicateId, userId])
}

model Purchase {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditAmount Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  outTradeNo   String   @unique
  tradeNo      String?
  totalAmount  Int?
  payStatus    String?  @default("1")
  payTime      DateTime?
  payType      String?
  channel      String?
  bid          String?
  bcode        String?


}

model MealSet {
  id           String   @id @default(cuid())
  name         String
  price        Int
  description  String
  level        Int
  createdAt    DateTime @default(now())
  amount        Int
}

model SmsStat {
  id           String   @id @default(cuid())
  tel         String    @unique
  sense        Int
  day         String
  count        Int
}

model SmsCode {
  id           String   @id @default(cuid())
  tel         String    @unique
  code        String
}


